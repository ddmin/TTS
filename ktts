#!/usr/bin/python3
# ktts (聞tts): converts text file into mp3

# TODO: click
# TODO: separate pages with ##Page 1## -> into chapters
# TODO: dump pdf text -> txt file -> $EDITOR txt -> mimic3 -> mpv
# TODO: dump pdf text -> txt file -> $EDITOR txt -> mimic3 -> mpv
# TODO: sanitize - test bracketed words

# TODO: concat files
# https://superuser.com/questions/314239/how-to-join-merge-many-mp3-files

# TODO: ffmpeg get duration
# https://stackoverflow.com/questions/6239350/how-to-extract-duration-time-from-ffmpeg-output

# TODO: https://community.openconversational.ai/t/how-to-use-mimic3-directly-from-python-code/12778


import subprocess
import pdftotext
import sys
import click
import uuid
import os

SAVE_DIRECTORY = "/tmp/ktts"


def generate_tts(text):
    """Use mimic3 to generate mp3 files."""
    output = f'{SAVE_DIRECTORY}/{unique_identifier()}.mp3'
    print(output)
    text = subprocess.Popen(['echo', '"' + text +'"'], stdout=subprocess.PIPE)
    sanitize = subprocess.Popen(['sanitize'], stdin=text.stdout, stdout=subprocess.PIPE)
    with open(output, 'w') as f:
        subprocess.Popen(['mimic3', '--voice', 'en_US/vctk_low#p276'], stdin=sanitize.stdout, stdout=f, stderr=subprocess.DEVNULL)
    return output


def setup():
    """Create save directory."""
    if not os.path.exists(SAVE_DIRECTORY):
        os.mkdir(SAVE_DIRECTORY)


def unique_identifier():
    """Return unique filename identifier."""
    return uuid.uuid4().hex


@click.command()
@click.argument("file", type=click.File("rb"), nargs=1)
def main(file):
    setup()

    if file.name[-3:] == "pdf":
        pdf = pdftotext.PDF(file)
        text = "".join([f"###{page+1}###" + pdf[page] for page in range(len(pdf))])
    else:
        text = file.read().decode()

    # separate pages
    pages = text.split("###")
    pages = list(filter(lambda x: x, pages))

    # multiple pages
    if not len(pages) < 2:
        if len(pages) % 2 == 0:
            page_names = [pages[n] for n in range(0, len(pages), 2)]
            page_contents = [pages[n] for n in range(1, len(pages), 2)]
        else:
            raise click.UsageError(
                f"'{file.name}' does not have corresponding pages and page numbers."
            )
    else:
        page_names = [file.name]
        page_contents = pages

    generate_tts('hello')


if __name__ == "__main__":
    main()
