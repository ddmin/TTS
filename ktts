#!/usr/bin/python3
# ktts (聞tts): converts text file into mp3


# TODO: flag to select page range
# TODO: flag to control ffmpeg verbose
# TODO: flag to set image
# TODO: flag to set # threads

from concurrent.futures import ThreadPoolExecutor, as_completed
import subprocess
import pdftotext
import click
import tqdm
import uuid
import os
import re


SAVE_DIRECTORY = "/tmp/ktts"
TTS_IMAGE = "~/.icons/tts_bg.png"
SAVE_FILE_EXT = ".mp4"
FFMPEG_OUTPUT = "-v quiet"

if not os.cpu_count() is None:
    MAXIMUM_THREADS = max(os.cpu_count() // 2, 1)
else:
    MAXIMUM_THREADS = 1


def check_then_delete(path, check: bool):
    """Check if file exists. If file exists, confirm deletion, otherwise exit."""
    if check:
        if os.path.exists(path):
            click.echo(
                click.style(
                    f"File '{path}' already exists. Overwrite? [y/N] ", fg="bright_red"
                ),
                nl=False,
            )
            choice = input()
            if choice.lower() not in ("y", "yes"):
                exit(1)

    if os.path.exists(path):
        os.remove(path)


def write_ffmpeg_metadata(base_name, page_names, wav_lengths):
    """Write ffmpeg metadata for title and chapters (https://wiki.multimedia.cx/index.php/FFmpeg_Metadata)"""

    metadata_file = f"{SAVE_DIRECTORY}/metadata.txt"

    metadata = [
        ";FFMETADATA1",
        f"title={base_name}",
    ]

    start = 0
    end = -1
    chapters = []

    assert len(page_names) == len(wav_lengths)
    if len(page_names) > 1 and len(wav_lengths) > 1:
        for page, wav_length in zip(page_names[:-1], wav_lengths[:-1]):
            start = end + 1
            end = start + wav_length - 1
            chapters.append((page, (start, end)))

    # last wav file marked to end (or single file)
    start = end + 1
    chapters.append((page_names[-1], (start, start + wav_lengths[-1])))

    for chapter, (start, end) in chapters:
        metadata.extend(["[CHAPTER]", "TIMEBASE=1/1000"])
        metadata.extend([f"START={start}", f"END={end}", f"title={chapter}"])

    with open(metadata_file, "w") as f:
        f.write("\n".join(metadata))

    return metadata_file


def get_wav_length(wav_file):
    """Return the duration of a wav file"""
    wav_length_cmd = (
        f'ffprobe -i {wav_file} -show_entries format=duration -v quiet -of csv="p=0"'
    )
    output = subprocess.Popen(
        wav_length_cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE
    )
    wav_length, _ = output.communicate()
    return wav_length


def generate_tts_files(page_names, page_contents):
    """Generate tts (wav) files for each page"""
    progress = tqdm.tqdm(total=len(page_names), desc="Generating TTS")

    futures = []
    with ThreadPoolExecutor(max_workers=MAXIMUM_THREADS) as executor:
        for page, page_content in zip(page_names, page_contents):

            def mimic_worker(page):
                return page, generate_tts(page_content)

            futures.append(executor.submit(mimic_worker, page))

        # update progress for each completed future
        for _ in as_completed(futures):
            progress.update(n=1)

    futures = list(map(lambda future: future.result(), futures))
    wavs = {page: wav_file for page, wav_file in futures}

    return wavs


def write_file(text):
    """Write text to a temporary txt file."""
    output = f"{SAVE_DIRECTORY}/{unique_identifier()}.txt"
    with open(output, "w") as f:
        f.write(text)

    return output


def generate_tts(text):
    """Use mimic3 to generate wav files."""
    output = f"{SAVE_DIRECTORY}/{unique_identifier()}.wav"
    text_file = write_file(text)

    text = subprocess.Popen(["cat", text_file], stdout=subprocess.PIPE)
    sanitize = subprocess.Popen(["sanitize"], stdin=text.stdout, stdout=subprocess.PIPE)
    with open(output, "w") as f:
        mimic = subprocess.Popen(
            ["mimic3", "--voice", "en_US/vctk_low#p276"],
            stdin=sanitize.stdout,
            stdout=f,
            stderr=subprocess.DEVNULL,
        )
        mimic.wait()

    return output


def setup():
    """Setup related processes."""

    # create save directory
    if not os.path.exists(SAVE_DIRECTORY):
        os.mkdir(SAVE_DIRECTORY)


def unique_identifier():
    """Return unique filename identifier."""
    return uuid.uuid4().hex


def sanitize_filename(filename):
    """Remove unsavory characters (from filename)"""
    remove_regex = r"[^A-Za-z0-9\.]"
    return re.sub(remove_regex, "-", filename)


@click.command()
@click.argument("file", type=click.File("rb"), nargs=1)
def main(file):
    base_name = ".".join(file.name.split(".")[:-1])
    base_name = sanitize_filename(base_name)

    # wav file produced after concatenating mimic3 files
    temp_wav_name = f"{SAVE_DIRECTORY}/{base_name}-temp.wav"

    # mp4 file support chapters
    temp_mp4_name = f"{SAVE_DIRECTORY}/{base_name}-temp{SAVE_FILE_EXT}"

    save_file_name = base_name + SAVE_FILE_EXT
    setup()

    # remove the temporary files
    check_then_delete(save_file_name, check=True)
    check_then_delete(temp_wav_name, check=False)
    check_then_delete(temp_mp4_name, check=False)

    if file.name[-3:] == "pdf":
        # if file is pdf, read pdf and separate pages with ###{page number}###
        pdf = pdftotext.PDF(file)
        text = "".join([f"###Page {page+1}###" + pdf[page] for page in range(len(pdf))])
    else:
        text = file.read().decode()

    # separate pages
    pages = text.split("###")
    pages = list(filter(lambda x: x, pages))

    # handle multiple / single pages
    if not len(pages) < 2:
        if len(pages) % 2 == 0:
            page_names = [pages[n] for n in range(0, len(pages), 2)]
            page_contents = [pages[n] for n in range(1, len(pages), 2)]
        else:
            raise click.UsageError(
                f"'{file.name}' does not have corresponding pages and page numbers."
            )
    else:
        page_names = [file.name]
        page_contents = pages

    assert len(page_names) == len(page_contents)

    click.echo()  # newline for formatting purposes
    wavs = generate_tts_files(page_names, page_contents)

    concat_file = ""
    wav_lengths = []
    for page in page_names:
        wav_file = wavs[page]

        wav_lengths.append(get_wav_length(wav_file))
        concat_file += f"file '{wav_file}'\n"

    wav_lengths = list(map(lambda x: float(x) * 1000, wav_lengths))

    concat_file = concat_file[:-1]

    wav_list = f"{SAVE_DIRECTORY}/wav-list.txt"
    with open(wav_list, "w") as f:
        f.write(concat_file)

    # join wav files into one (temporary) wav file
    click.echo(
        click.style(f"\n[FFMPEG] ", fg="bright_blue")
        + click.style("Concatenating TTS files...")
    )
    concat_cmd = f"ffmpeg -f concat -safe 0 -i {wav_list} -c copy {temp_wav_name} {FFMPEG_OUTPUT}"
    subprocess.run(concat_cmd, shell=True)

    metadata_file = write_ffmpeg_metadata(base_name, page_names, wav_lengths)

    # convert to format (mp4) that supports chapters
    click.echo(
        click.style(f"[FFMPEG] ", fg="bright_blue")
        + click.style("Encoding TTS file into mp4 file...")
    )
    convert_cmd = f"ffmpeg -loop 1 -i {TTS_IMAGE} -i {temp_wav_name} -c:v libx264 -tune stillimage -c:a aac -b:a 192k -pix_fmt yuv420p -shortest {temp_mp4_name} {FFMPEG_OUTPUT}"
    subprocess.run(convert_cmd, shell=True)

    # add metadata to mp4 file
    click.echo(
        click.style(f"[FFMPEG] ", fg="bright_blue")
        + click.style(f"Adding metadata to '{save_file_name}'...")
    )
    metadata_cmd = f"ffmpeg -i {temp_mp4_name} -i {metadata_file} -map_metadata 1 -c copy {save_file_name} {FFMPEG_OUTPUT}"
    subprocess.run(metadata_cmd, shell=True)

    click.echo(click.style(f"\nFile saved to '{save_file_name}'", fg="bright_green"))


if __name__ == "__main__":
    main()
